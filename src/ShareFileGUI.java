import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.LinkedList;

/**
 * Created by wk_51920 on 2014/12/12.
 */
public class ShareFileGUI extends javax.swing.JFrame {

    private UserInfo userInfo;
    private Login login;
    private SearchResult searchResult;
    private LinkedList<TransportServer> threadList = new LinkedList<TransportServer>();

    /**
     * Creates new form ShareFileUI
     */
    public ShareFileGUI(UserInfo userInfo, Login login) {
        this.userInfo = userInfo;
        this.login = login;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        jScrollBar1 = new javax.swing.JScrollBar();
        jPanel1 = new javax.swing.JPanel();
        fileNameLabel = new javax.swing.JLabel();
        fileNameText = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();
        jScrollBar2 = new javax.swing.JScrollBar();
        downloadButton = new javax.swing.JButton();
        individualCenterButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        refreshButton = new javax.swing.JButton();
        transportButton = new javax.swing.JButton();

        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "p2p文件共享系统", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("宋体", 0, 18))); // NOI18N

        fileNameLabel.setText("文件名：");

        searchButton.setText("查找");
        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchButtonActionPerformed(e);
            }
        });

        dlm = new DefaultListModel();
        fileList.setModel(dlm);
        fileList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); //只能单选

        jScrollPane2.setViewportView(fileList);

        downloadButton.setText("下载文件");
        downloadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                downloadButtonActionPerformed(e);
            }
        });

        individualCenterButton.setText("个人中心");
        individualCenterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                individualCenterButtonActionPerformed(evt);
            }
        });

        exitButton.setText("退出登录");
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                exitButtonActionPerformed(e);
            }
        });

        refreshButton.setText("刷新");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        transportButton.setText("传输开/关");
        transportButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                transportButtionActionPerformed(e);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(fileNameLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(fileNameText, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(searchButton)
                                                .addGap(18, 18, 18)
                                                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(exitButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(transportButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(downloadButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(individualCenterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(fileNameLabel)
                                        .addComponent(fileNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(searchButton)
                                        .addComponent(exitButton)
                                        .addComponent(refreshButton))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(transportButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(35, 35, 35)
                                                .addComponent(downloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(46, 46, 46)
                                                .addComponent(individualCenterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(26, Short.MAX_VALUE))
        );
        addWindowListener(new WindowAdapter() {    //用于监听此窗口的关闭事件,等同于“退出登录功能”
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                userInfo.setOnline(false);          //用户下线
                userInfo.setTransport(false);       //不允许用户传输文件
                userInfo.setFlag(3);                //3表示该用户信息用于处理用户下线
                ClientThread clientThread = null;
                try {
                    clientThread = new ClientThread(InetAddress.getLocalHost(), 5500, userInfo);
                    clientThread.run();
                    dispose();
                } catch (UnknownHostException ex) {
                    System.out.println("ShareFileUI exitButton UnknownHostException!");
                } catch (IOException ex) {
                    System.out.println("ShareFileUI exitButton IOException!");
                }
                login.setVisible(true);
            }
        });
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((dim.width - 604) / 2, (dim.height - 481) / 2);
        pack();
    }// </editor-fold>

    private void individualCenterButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        new IndividualCenter(userInfo, this).setVisible(true);
        setVisible(false);
    }

    private void searchButtonActionPerformed(ActionEvent e) {
        ClientThread clientThread = null;
        try {
            clientThread = new ClientThread(InetAddress.getLocalHost(), 5500, new SearchResult(fileNameText.getText(), 2));
            clientThread.run();
            this.searchResult = clientThread.getSearchResult();
            if (searchResult.getResult().isEmpty())
                JOptionPane.showMessageDialog(this, "没有找到该文件！");
            else {
                dlm.clear();                //清空当前列表
                for (FileShare fileShare : searchResult.getResult()) {
                    fileShare.setDisplayFlag(2);             //只返回文件路径
                    dlm.addElement(fileShare);
                }
                fileList.setModel(dlm);
            }
        } catch (UnknownHostException evt) {
            System.out.println("查找本用户上传过的文件");
        } catch (IOException e1) {
            System.out.println("查找本用户时IO异常");
        }

    }

    private void refreshButtonActionPerformed(ActionEvent e) {
        ClientThread clientThread = null;
        try {
            clientThread = new ClientThread(InetAddress.getLocalHost(), 5500, new SearchResult(fileNameText.getText(), 3));
            clientThread.run();
            this.searchResult = clientThread.getSearchResult();
            if (searchResult.getResult().isEmpty())
                JOptionPane.showMessageDialog(this, "数据库中没有任何文件！");
            else {
                dlm.clear();                //清空当前列表
                for (FileShare fileShare : searchResult.getResult()) {
                    fileShare.setDisplayFlag(2);             //只返回文件路径
                    dlm.addElement(fileShare);
                }
                fileList.setModel(dlm);
            }
        } catch (UnknownHostException evt) {
            System.out.println("查找本用户上传过的文件");
        } catch (IOException e1) {
            System.out.println("查找本用户时IO异常");
        }
    }

    private void exitButtonActionPerformed(ActionEvent e) {
        userInfo.setOnline(false);          //用户下线
        userInfo.setTransport(false);       //用户设为不允许传输文件
        userInfo.setFlag(3);                //3表示该用户信息用于处理用户下线
        ClientThread clientThread = null;
        try {
            clientThread = new ClientThread(InetAddress.getLocalHost(), 5500, userInfo);
            clientThread.run();
            dispose();
        } catch (UnknownHostException ex) {
            System.out.println("ShareFileUI exitButton UnknownHostException!");
        } catch (IOException ex) {
            System.out.println("ShareFileUI exitButton IOException!");
        }
        login.setVisible(true);
    }

    private void transportButtionActionPerformed(ActionEvent e) {
        if (!this.userInfo.isTransport())
            this.userInfo.setTransport(true);           //切换是否允许传输文件状态
        else this.userInfo.setTransport(false);
        this.userInfo.setFlag(4);                       //设置用户是否允许传输的状态
        ClientThread clientThread = null;
        ClientThread searchPort = null;
        try {
            searchPort = new ClientThread(InetAddress.getLocalHost(), 5500, new SearchResult(userInfo.getUserName(), 4));
            searchPort.run();
            this.searchResult = searchPort.getSearchResult();
            if (searchResult.getResult().isEmpty())
                JOptionPane.showMessageDialog(this, "数据库中没有任何文件！");
            else {
                for (FileShare fileShare : searchResult.getResult()) {
                    threadList.add(new TransportServer(fileShare));
                }
            }


            clientThread = new ClientThread(InetAddress.getLocalHost(), 5500, this.userInfo);
            clientThread.run();
            if (clientThread.getResultFlag() == 7) {
                JOptionPane.showMessageDialog(this, "用户传输状态更改成功！");
                if (this.userInfo.isTransport()) {
                    for (TransportServer transportServer : threadList)
                        transportServer.start();      //所有线程开启
                } else {
                    for (TransportServer transportServer : threadList)
                        transportServer.stop();
                }

            } else JOptionPane.showMessageDialog(this, "用户传输状态更改失败！");
        } catch (UnknownHostException ex) {
            System.out.println("ShareFileUI exitButton UnknownHostException!");
        } catch (IOException ex) {
            System.out.println("ShareFileUI exitButton IOException!");
        }
    }

    private void downloadButtonActionPerformed(ActionEvent e) {
        ClientThread clientThread = null;
        FileShare fileShare = (FileShare) fileList.getSelectedValue();   //从列表中得到选中的值
        fileShare.setFunction(3);                                        //将此文件信息的用途设为查询传输状态
        try {
            clientThread = new ClientThread(InetAddress.getLocalHost(), 5500, fileShare);
            clientThread.run();
            fileShare = clientThread.getFileShare();
            if (fileShare.getIsTransport() == 1) //此用户允许传输
            {
                JFileChooser jfc = new JFileChooser();
                jfc.setFileSelectionMode(1);         //0:设定只能选择到文件  1:选择到目录
                int state = jfc.showOpenDialog(null);//此句是打开文件选择器界面的触发语句
                if (state == 1) {
                    return;                          //撤销则返回
                } else {
                    File f = jfc.getSelectedFile();    //f为选择到的文件
                    Socket socket;
                    socket = new Socket(fileShare.getIPaddress(),fileShare.getPort());
                    receiveFile(socket,f.getAbsolutePath()+"/"+fileShare.getFileName());
                    System.out.println(f.getAbsoluteFile());
                }
            } else JOptionPane.showMessageDialog(this, "此用户未开启传输状态！");
        } catch (UnknownHostException evt) {
            System.out.println("查找本用户上传过的文件");
        } catch (IOException e1) {
            System.out.println("查找本用户时IO异常");
        }
    }

    private void receiveFile(Socket socket, String filePath) throws IOException {
        byte[] inputByte = null;
        int length = 0;
        DataInputStream dis = null;
        FileOutputStream fos = null;
        try {
            try {
                dis = new DataInputStream(socket.getInputStream());
                /*
				 * 文件存储位置
				 */
                fos = new FileOutputStream(new File(filePath));
                inputByte = new byte[1024];
                System.out.println("开始接收数据...");
                while ((length = dis.read(inputByte, 0, inputByte.length)) > 0) {
                    fos.write(inputByte, 0, length);
                    fos.flush();
                }
                System.out.println("完成接收：" + filePath);
            } finally {
                if (fos != null)
                    fos.close();
                if (dis != null)
                    dis.close();
                if (socket != null)
                    socket.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }



    // Variables declaration - do not modify
    private javax.swing.JButton downloadButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JList fileList;
    private javax.swing.JLabel fileNameLabel;
    private javax.swing.JTextField fileNameText;
    private javax.swing.JButton individualCenterButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollBar jScrollBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton transportButton;
    private DefaultListModel dlm;         //用于动态添加和删除JList中的内容
    // End of variables declaration
}
